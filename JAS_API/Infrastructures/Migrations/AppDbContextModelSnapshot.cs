// <auto-generated />
using System;
using Infrastructures;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructures.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmationToken")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int?>("RoleId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Domain.Entity.AddressToShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WardId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WardId");

                    b.ToTable("AddressToShips");
                });

            modelBuilder.Entity("Domain.Entity.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Domain.Entity.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Auctions");
                });

            modelBuilder.Entity("Domain.Entity.AutoBid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerLotId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<float?>("MaxPrice")
                        .HasColumnType("real");

                    b.Property<float?>("MinPrice")
                        .HasColumnType("real");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("NumberOfPriceStep")
                        .HasColumnType("real");

                    b.Property<DateTime?>("TimeIncrement")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerLotId");

                    b.ToTable("AutoBids");
                });

            modelBuilder.Entity("Domain.Entity.BidIncrement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("From")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("PricePerStep")
                        .HasColumnType("real");

                    b.Property<float?>("To")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("BidIncrements");
                });

            modelBuilder.Entity("Domain.Entity.BidLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("File")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("PriceLimit")
                        .HasColumnType("real");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("BidLimits");
                });

            modelBuilder.Entity("Domain.Entity.BidPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BidTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("CurrentPrice")
                        .HasColumnType("real");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LotId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LotId");

                    b.ToTable("BidPrices");
                });

            modelBuilder.Entity("Domain.Entity.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ImageBlogId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Domain.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Entity.CreditCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BankAccountHolder")
                        .HasColumnType("text");

                    b.Property<string>("BankCode")
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Domain.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("CitizenIdentificationCard")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<DateTime?>("IDExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("IDIssuanceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("PriceLimit")
                        .HasColumnType("real");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Entity.CustomerLot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("AutoBidPrice")
                        .HasColumnType("real");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("CurrentPrice")
                        .HasColumnType("real");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpireDateOfBidLimit")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("IsAutoBid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDeposit")
                        .HasColumnType("boolean");

                    b.Property<int?>("LotId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("PriceLimit")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LotId");

                    b.ToTable("CustomerLots");
                });

            modelBuilder.Entity("Domain.Entity.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("Domain.Entity.DocumentMainDiamond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentLink")
                        .HasColumnType("text");

                    b.Property<string>("DocumentTitle")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MainDiamondId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainDiamondId");

                    b.ToTable("DocumentMainDiamonds");
                });

            modelBuilder.Entity("Domain.Entity.DocumentMainShaphie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentLink")
                        .HasColumnType("text");

                    b.Property<string>("DocumentTitle")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MainShaphieId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainShaphieId");

                    b.ToTable("DocumentMainShaphies");
                });

            modelBuilder.Entity("Domain.Entity.DocumentSecondaryDiamond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentLink")
                        .HasColumnType("text");

                    b.Property<string>("DocumentTitle")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SecondaryDiamondId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryDiamondId");

                    b.ToTable("DocumentSecondaryDiamonds");
                });

            modelBuilder.Entity("Domain.Entity.DocumentSecondaryShaphie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentLink")
                        .HasColumnType("text");

                    b.Property<string>("DocumentTitle")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SecondaryShaphieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryShaphieId");

                    b.ToTable("DocumentSecondaryShaphies");
                });

            modelBuilder.Entity("Domain.Entity.FeeShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("Free")
                        .HasColumnType("real");

                    b.Property<float?>("From")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("To")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("FeeShips");
                });

            modelBuilder.Entity("Domain.Entity.FloorFeePersent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("From")
                        .HasColumnType("real");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("Percent")
                        .HasColumnType("real");

                    b.Property<float?>("To")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("FloorFeePersents");
                });

            modelBuilder.Entity("Domain.Entity.FollwerArtist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CustomerId");

                    b.ToTable("FollwerArtists");
                });

            modelBuilder.Entity("Domain.Entity.HistoryValuation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("StatusName")
                        .HasColumnType("text");

                    b.Property<int?>("ValuationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ValuationId");

                    b.ToTable("HistoryValuations");
                });

            modelBuilder.Entity("Domain.Entity.ImageBlog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BlogId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.ToTable("ImageBlogs");
                });

            modelBuilder.Entity("Domain.Entity.ImageJewelry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JewelryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ThumbnailImage")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JewelryId");

                    b.ToTable("ImageJewelrys");
                });

            modelBuilder.Entity("Domain.Entity.ImageMainDiamond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MainDiamondId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainDiamondId");

                    b.ToTable("ImageMainDiamonds");
                });

            modelBuilder.Entity("Domain.Entity.ImageMainShaphie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("MainShaphieId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MainShaphieId");

                    b.ToTable("ImageMainShaphies");
                });

            modelBuilder.Entity("Domain.Entity.ImageSecondaryDiamond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SecondaryDiamondId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryDiamondId");

                    b.ToTable("ImageSecondaryDiamonds");
                });

            modelBuilder.Entity("Domain.Entity.ImageSecondaryShaphie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SecondaryShaphieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SecondaryShaphieId");

                    b.ToTable("ImageSecondaryShaphies");
                });

            modelBuilder.Entity("Domain.Entity.ImageValuation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultImage")
                        .HasColumnType("text");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("ValuationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ValuationId");

                    b.ToTable("ImageValuations");
                });

            modelBuilder.Entity("Domain.Entity.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressToShipId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("CustomerLotId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("FeeShip")
                        .HasColumnType("real");

                    b.Property<float?>("Free")
                        .HasColumnType("real");

                    b.Property<int?>("InvoiceOfWalletTransactionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("ShipperId")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<float?>("TotalPrice")
                        .HasColumnType("real");

                    b.Property<string>("TransferInvoice")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AddressToShipId")
                        .IsUnique();

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerLotId")
                        .IsUnique();

                    b.HasIndex("InvoiceOfWalletTransactionId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ShipperId");

                    b.HasIndex("StaffId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("Domain.Entity.Jewelry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<string>("BidForm")
                        .HasColumnType("text");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float?>("EstimatePriceMax")
                        .HasColumnType("real");

                    b.Property<float?>("EstimatePriceMin")
                        .HasColumnType("real");

                    b.Property<string>("ForGender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<float?>("SpecificPrice")
                        .HasColumnType("real");

                    b.Property<float?>("StartingPrice")
                        .HasColumnType("real");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Time_Bidding")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("ValuationId")
                        .HasColumnType("integer");

                    b.Property<string>("VideoLink")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ValuationId")
                        .IsUnique();

                    b.ToTable("Jewelries");
                });

            modelBuilder.Entity("Domain.Entity.KeyCharacteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KeyCharacteristics");
                });

            modelBuilder.Entity("Domain.Entity.KeyCharacteristicDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JewelryId")
                        .HasColumnType("integer");

                    b.Property<int?>("KeyCharacteristicId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("JewelryId");

                    b.HasIndex("KeyCharacteristicId");

                    b.ToTable("KeyCharacteristicDetails");
                });

            modelBuilder.Entity("Domain.Entity.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("AuctionId")
                        .HasColumnType("integer");

                    b.Property<float?>("BidIncrement")
                        .HasColumnType("real");

                    b.Property<float?>("BuyNowPrice")
                        .HasColumnType("real");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("CurrentPrice")
                        .HasColumnType("real");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("Deposit")
                        .HasColumnType("real");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("FinalPriceSold")
                        .HasColumnType("real");

                    b.Property<int?>("FloorFeePercent")
                        .HasColumnType("integer");

                    b.Property<bool?>("HaveFinancialProof")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsExtend")
                        .HasColumnType("boolean");

                    b.Property<int?>("JewelryId")
                        .HasColumnType("integer");

                    b.Property<string>("LotType")
                        .HasColumnType("text");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SellerId")
                        .HasColumnType("integer");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<float?>("StartPrice")
                        .HasColumnType("real");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.HasIndex("JewelryId")
                        .IsUnique();

                    b.HasIndex("SellerId");

                    b.HasIndex("StaffId");

                    b.ToTable("Lots");
                });

            modelBuilder.Entity("Domain.Entity.MainDiamond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Certificate")
                        .HasColumnType("text");

                    b.Property<string>("Clarity")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Cut")
                        .HasColumnType("text");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Dimension")
                        .HasColumnType("text");

                    b.Property<string>("Fluorescence")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JewelryId")
                        .HasColumnType("integer");

                    b.Property<string>("LengthWidthRatio")
                        .HasColumnType("text");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SettingType")
                        .HasColumnType("text");

                    b.Property<string>("Shape")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JewelryId");

                    b.ToTable("MainDiamonds");
                });

            modelBuilder.Entity("Domain.Entity.MainShaphie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Carat")
                        .HasColumnType("real");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Dimension")
                        .HasColumnType("text");

                    b.Property<string>("EnhancementType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JewelryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SettingType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JewelryId");

                    b.ToTable("MainShaphies");
                });

            modelBuilder.Entity("Domain.Entity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("Is_Read")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notifi_Type")
                        .HasColumnType("text");

                    b.Property<int?>("NotifiableId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Entity.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Domain.Entity.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("Domain.Entity.RequestWithdraw", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Amount")
                        .HasColumnType("real");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WalletId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("RequestWithdraws");
                });

            modelBuilder.Entity("Domain.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Customer"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("Domain.Entity.SecondaryDiamond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Certificate")
                        .HasColumnType("text");

                    b.Property<string>("Clarity")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Cut")
                        .HasColumnType("text");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Dimension")
                        .HasColumnType("text");

                    b.Property<string>("Fluorescence")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JewelryId")
                        .HasColumnType("integer");

                    b.Property<string>("LengthWidthRatio")
                        .HasColumnType("text");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SettingType")
                        .HasColumnType("text");

                    b.Property<string>("Shape")
                        .HasColumnType("text");

                    b.Property<float?>("TotalCarat")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("JewelryId");

                    b.ToTable("SecondaryDiamonds");
                });

            modelBuilder.Entity("Domain.Entity.SecondaryShaphie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Carat")
                        .HasColumnType("real");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Dimension")
                        .HasColumnType("text");

                    b.Property<string>("EnhancementType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("JewelryId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SettingType")
                        .HasColumnType("text");

                    b.Property<float?>("TotalCarat")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("JewelryId");

                    b.ToTable("SecondaryShaphies");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Staffs");
                });

            modelBuilder.Entity("Domain.Entity.StatusInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CurrentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageLink")
                        .HasColumnType("text");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("StatusInvoices");
                });

            modelBuilder.Entity("Domain.Entity.Valuation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActualStatusOfJewelry")
                        .HasColumnType("text");

                    b.Property<int?>("AppraiserId")
                        .HasColumnType("integer");

                    b.Property<string>("CancelReason")
                        .HasColumnType("text");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("Depth")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float?>("EstimatePriceMax")
                        .HasColumnType("real");

                    b.Property<float?>("EstimatePriceMin")
                        .HasColumnType("real");

                    b.Property<float?>("Height")
                        .HasColumnType("real");

                    b.Property<string>("ImageOfReceip")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PricingTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("SellerId")
                        .HasColumnType("integer");

                    b.Property<float?>("SpecificPrice")
                        .HasColumnType("real");

                    b.Property<int?>("StaffId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<float?>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AppraiserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SellerId");

                    b.HasIndex("StaffId");

                    b.ToTable("Valuations");
                });

            modelBuilder.Entity("Domain.Entity.ValuationDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DocumentLink")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SignatureCode")
                        .HasColumnType("text");

                    b.Property<string>("ValuationDocumentType")
                        .HasColumnType("text");

                    b.Property<int?>("ValuationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ValuationId");

                    b.ToTable("ValuationDocuments");
                });

            modelBuilder.Entity("Domain.Entity.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Domain.Entity.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<float?>("Amount")
                        .HasColumnType("real");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DocNo")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TransactionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("WalletId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("WalletTransaction");
                });

            modelBuilder.Entity("Domain.Entity.Ward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("Domain.Entity.Watching", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int?>("DeleteBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("LotId")
                        .HasColumnType("integer");

                    b.Property<int?>("ModificationBy")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModificationDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LotId");

                    b.ToTable("Watchings");
                });

            modelBuilder.Entity("Domain.Entity.Account", b =>
                {
                    b.HasOne("Domain.Entity.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entity.AddressToShip", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithMany("AddressToShips")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entity.Ward", "Ward")
                        .WithMany("AddressToShips")
                        .HasForeignKey("WardId");

                    b.Navigation("Customer");

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("Domain.Entity.AutoBid", b =>
                {
                    b.HasOne("Domain.Entity.CustomerLot", "CustomerLot")
                        .WithMany("AutoBids")
                        .HasForeignKey("CustomerLotId");

                    b.Navigation("CustomerLot");
                });

            modelBuilder.Entity("Domain.Entity.BidLimit", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithMany("BidLimits")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entity.BidPrice", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithMany("BidPrices")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entity.Lot", "Lot")
                        .WithMany("BidPrices")
                        .HasForeignKey("LotId");

                    b.Navigation("Customer");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Domain.Entity.Blog", b =>
                {
                    b.HasOne("Domain.Entity.Account", "Account")
                        .WithMany("Blogs")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entity.CreditCard", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithOne("CreditCard")
                        .HasForeignKey("Domain.Entity.CreditCard", "CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entity.Customer", b =>
                {
                    b.HasOne("Domain.Entity.Account", "Account")
                        .WithOne("Customer")
                        .HasForeignKey("Domain.Entity.Customer", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entity.CustomerLot", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithMany("CustomerLots")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entity.Lot", "Lot")
                        .WithMany("CustomerLots")
                        .HasForeignKey("LotId");

                    b.Navigation("Customer");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Domain.Entity.District", b =>
                {
                    b.HasOne("Domain.Entity.Province", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("Domain.Entity.DocumentMainDiamond", b =>
                {
                    b.HasOne("Domain.Entity.MainDiamond", "MainDiamond")
                        .WithMany("DocumentMainDiamonds")
                        .HasForeignKey("MainDiamondId");

                    b.Navigation("MainDiamond");
                });

            modelBuilder.Entity("Domain.Entity.DocumentMainShaphie", b =>
                {
                    b.HasOne("Domain.Entity.MainShaphie", "MainShaphie")
                        .WithMany("DocumentMainShaphies")
                        .HasForeignKey("MainShaphieId");

                    b.Navigation("MainShaphie");
                });

            modelBuilder.Entity("Domain.Entity.DocumentSecondaryDiamond", b =>
                {
                    b.HasOne("Domain.Entity.SecondaryDiamond", "SecondaryDiamond")
                        .WithMany("DocumentSecondaryDiamonds")
                        .HasForeignKey("SecondaryDiamondId");

                    b.Navigation("SecondaryDiamond");
                });

            modelBuilder.Entity("Domain.Entity.DocumentSecondaryShaphie", b =>
                {
                    b.HasOne("Domain.Entity.SecondaryShaphie", "SecondaryShaphie")
                        .WithMany("DocumentSecondaryShaphies")
                        .HasForeignKey("SecondaryShaphieId");

                    b.Navigation("SecondaryShaphie");
                });

            modelBuilder.Entity("Domain.Entity.FollwerArtist", b =>
                {
                    b.HasOne("Domain.Entity.Artist", "Artist")
                        .WithMany("FollwerArtists")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithMany("FollwerArtists")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Artist");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entity.HistoryValuation", b =>
                {
                    b.HasOne("Domain.Entity.Valuation", "Valuation")
                        .WithMany("HistoryValuations")
                        .HasForeignKey("ValuationId");

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Domain.Entity.ImageBlog", b =>
                {
                    b.HasOne("Domain.Entity.Blog", "Blog")
                        .WithMany("ImageBlogs")
                        .HasForeignKey("BlogId");

                    b.Navigation("Blog");
                });

            modelBuilder.Entity("Domain.Entity.ImageJewelry", b =>
                {
                    b.HasOne("Domain.Entity.Jewelry", "Jewelry")
                        .WithMany("ImageJewelries")
                        .HasForeignKey("JewelryId");

                    b.Navigation("Jewelry");
                });

            modelBuilder.Entity("Domain.Entity.ImageMainDiamond", b =>
                {
                    b.HasOne("Domain.Entity.MainDiamond", "MainDiamond")
                        .WithMany("ImageMainDiamonds")
                        .HasForeignKey("MainDiamondId");

                    b.Navigation("MainDiamond");
                });

            modelBuilder.Entity("Domain.Entity.ImageMainShaphie", b =>
                {
                    b.HasOne("Domain.Entity.MainShaphie", "MainShaphie")
                        .WithMany("ImageMainShaphies")
                        .HasForeignKey("MainShaphieId");

                    b.Navigation("MainShaphie");
                });

            modelBuilder.Entity("Domain.Entity.ImageSecondaryDiamond", b =>
                {
                    b.HasOne("Domain.Entity.SecondaryDiamond", "SecondaryDiamond")
                        .WithMany("ImageSecondaryDiamonds")
                        .HasForeignKey("SecondaryDiamondId");

                    b.Navigation("SecondaryDiamond");
                });

            modelBuilder.Entity("Domain.Entity.ImageSecondaryShaphie", b =>
                {
                    b.HasOne("Domain.Entity.SecondaryShaphie", "SecondaryShaphie")
                        .WithMany("ImageSecondaryShaphies")
                        .HasForeignKey("SecondaryShaphieId");

                    b.Navigation("SecondaryShaphie");
                });

            modelBuilder.Entity("Domain.Entity.ImageValuation", b =>
                {
                    b.HasOne("Domain.Entity.Valuation", "Valuation")
                        .WithMany("ImageValuations")
                        .HasForeignKey("ValuationId");

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Domain.Entity.Invoice", b =>
                {
                    b.HasOne("Domain.Entity.AddressToShip", "AddressToShip")
                        .WithOne("Invoice")
                        .HasForeignKey("Domain.Entity.Invoice", "AddressToShipId");

                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entity.CustomerLot", "CustomerLot")
                        .WithOne("Invoice")
                        .HasForeignKey("Domain.Entity.Invoice", "CustomerLotId");

                    b.HasOne("Domain.Entity.WalletTransaction", "InvoiceOfWalletTransaction")
                        .WithMany()
                        .HasForeignKey("InvoiceOfWalletTransactionId");

                    b.HasOne("Domain.Entity.PaymentMethod", "PaymentMethod")
                        .WithMany("Invoices")
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("Domain.Entity.Staff", "Shipper")
                        .WithMany("ShipperInvoices")
                        .HasForeignKey("ShipperId");

                    b.HasOne("Domain.Entity.Staff", "Staff")
                        .WithMany("StaffInvoices")
                        .HasForeignKey("StaffId");

                    b.Navigation("AddressToShip");

                    b.Navigation("Customer");

                    b.Navigation("CustomerLot");

                    b.Navigation("InvoiceOfWalletTransaction");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Shipper");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entity.Jewelry", b =>
                {
                    b.HasOne("Domain.Entity.Artist", "Artist")
                        .WithMany("Jewelries")
                        .HasForeignKey("ArtistId");

                    b.HasOne("Domain.Entity.Category", "Category")
                        .WithMany("Jewelries")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Domain.Entity.Valuation", "Valuation")
                        .WithOne("Jewelry")
                        .HasForeignKey("Domain.Entity.Jewelry", "ValuationId");

                    b.Navigation("Artist");

                    b.Navigation("Category");

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Domain.Entity.KeyCharacteristicDetail", b =>
                {
                    b.HasOne("Domain.Entity.Jewelry", "Jewelry")
                        .WithMany("KeyCharacteristicDetails")
                        .HasForeignKey("JewelryId");

                    b.HasOne("Domain.Entity.KeyCharacteristic", "KeyCharacteristic")
                        .WithMany("KeyCharacteristicDetails")
                        .HasForeignKey("KeyCharacteristicId");

                    b.Navigation("Jewelry");

                    b.Navigation("KeyCharacteristic");
                });

            modelBuilder.Entity("Domain.Entity.Lot", b =>
                {
                    b.HasOne("Domain.Entity.Auction", "Auction")
                        .WithMany("Lots")
                        .HasForeignKey("AuctionId");

                    b.HasOne("Domain.Entity.Jewelry", "Jewelry")
                        .WithOne("Lot")
                        .HasForeignKey("Domain.Entity.Lot", "JewelryId");

                    b.HasOne("Domain.Entity.Customer", "Seller")
                        .WithMany("Lots")
                        .HasForeignKey("SellerId");

                    b.HasOne("Domain.Entity.Staff", "Staff")
                        .WithMany("Lots")
                        .HasForeignKey("StaffId");

                    b.Navigation("Auction");

                    b.Navigation("Jewelry");

                    b.Navigation("Seller");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entity.MainDiamond", b =>
                {
                    b.HasOne("Domain.Entity.Jewelry", "Jewelry")
                        .WithMany("MainDiamonds")
                        .HasForeignKey("JewelryId");

                    b.Navigation("Jewelry");
                });

            modelBuilder.Entity("Domain.Entity.MainShaphie", b =>
                {
                    b.HasOne("Domain.Entity.Jewelry", "Jewelry")
                        .WithMany("MainShaphies")
                        .HasForeignKey("JewelryId");

                    b.Navigation("Jewelry");
                });

            modelBuilder.Entity("Domain.Entity.Notification", b =>
                {
                    b.HasOne("Domain.Entity.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entity.RequestWithdraw", b =>
                {
                    b.HasOne("Domain.Entity.Wallet", "Wallet")
                        .WithMany("RequestWithdraws")
                        .HasForeignKey("WalletId");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.Entity.SecondaryDiamond", b =>
                {
                    b.HasOne("Domain.Entity.Jewelry", "Jewelry")
                        .WithMany("SecondaryDiamonds")
                        .HasForeignKey("JewelryId");

                    b.Navigation("Jewelry");
                });

            modelBuilder.Entity("Domain.Entity.SecondaryShaphie", b =>
                {
                    b.HasOne("Domain.Entity.Jewelry", "Jewelry")
                        .WithMany("SecondaryShaphies")
                        .HasForeignKey("JewelryId");

                    b.Navigation("Jewelry");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.HasOne("Domain.Entity.Account", "Account")
                        .WithOne("Staff")
                        .HasForeignKey("Domain.Entity.Staff", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Entity.StatusInvoice", b =>
                {
                    b.HasOne("Domain.Entity.Invoice", "Invoice")
                        .WithMany("StatusInvoices")
                        .HasForeignKey("InvoiceId");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.Entity.Valuation", b =>
                {
                    b.HasOne("Domain.Entity.Staff", "Appraiser")
                        .WithMany("AppraiserValuations")
                        .HasForeignKey("AppraiserId");

                    b.HasOne("Domain.Entity.Customer", null)
                        .WithMany("Seller")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entity.Customer", "Seller")
                        .WithMany("SellerValuations")
                        .HasForeignKey("SellerId");

                    b.HasOne("Domain.Entity.Staff", "Staff")
                        .WithMany("StaffValuations")
                        .HasForeignKey("StaffId");

                    b.Navigation("Appraiser");

                    b.Navigation("Seller");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entity.ValuationDocument", b =>
                {
                    b.HasOne("Domain.Entity.Valuation", "Valuation")
                        .WithMany("ValuationDocuments")
                        .HasForeignKey("ValuationId");

                    b.Navigation("Valuation");
                });

            modelBuilder.Entity("Domain.Entity.Wallet", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Entity.Wallet", "CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entity.Ward", b =>
                {
                    b.HasOne("Domain.Entity.District", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Domain.Entity.Watching", b =>
                {
                    b.HasOne("Domain.Entity.Customer", "Customer")
                        .WithMany("Watchings")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Domain.Entity.Lot", "Lot")
                        .WithMany("Watchings")
                        .HasForeignKey("LotId");

                    b.Navigation("Customer");

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("Domain.Entity.Account", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Customer");

                    b.Navigation("Notifications");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Domain.Entity.AddressToShip", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.Entity.Artist", b =>
                {
                    b.Navigation("FollwerArtists");

                    b.Navigation("Jewelries");
                });

            modelBuilder.Entity("Domain.Entity.Auction", b =>
                {
                    b.Navigation("Lots");
                });

            modelBuilder.Entity("Domain.Entity.Blog", b =>
                {
                    b.Navigation("ImageBlogs");
                });

            modelBuilder.Entity("Domain.Entity.Category", b =>
                {
                    b.Navigation("Jewelries");
                });

            modelBuilder.Entity("Domain.Entity.Customer", b =>
                {
                    b.Navigation("AddressToShips");

                    b.Navigation("BidLimits");

                    b.Navigation("BidPrices");

                    b.Navigation("CreditCard");

                    b.Navigation("CustomerLots");

                    b.Navigation("FollwerArtists");

                    b.Navigation("Invoices");

                    b.Navigation("Lots");

                    b.Navigation("Seller");

                    b.Navigation("SellerValuations");

                    b.Navigation("Wallet");

                    b.Navigation("Watchings");
                });

            modelBuilder.Entity("Domain.Entity.CustomerLot", b =>
                {
                    b.Navigation("AutoBids");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Domain.Entity.District", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("Domain.Entity.Invoice", b =>
                {
                    b.Navigation("StatusInvoices");
                });

            modelBuilder.Entity("Domain.Entity.Jewelry", b =>
                {
                    b.Navigation("ImageJewelries");

                    b.Navigation("KeyCharacteristicDetails");

                    b.Navigation("Lot");

                    b.Navigation("MainDiamonds");

                    b.Navigation("MainShaphies");

                    b.Navigation("SecondaryDiamonds");

                    b.Navigation("SecondaryShaphies");
                });

            modelBuilder.Entity("Domain.Entity.KeyCharacteristic", b =>
                {
                    b.Navigation("KeyCharacteristicDetails");
                });

            modelBuilder.Entity("Domain.Entity.Lot", b =>
                {
                    b.Navigation("BidPrices");

                    b.Navigation("CustomerLots");

                    b.Navigation("Watchings");
                });

            modelBuilder.Entity("Domain.Entity.MainDiamond", b =>
                {
                    b.Navigation("DocumentMainDiamonds");

                    b.Navigation("ImageMainDiamonds");
                });

            modelBuilder.Entity("Domain.Entity.MainShaphie", b =>
                {
                    b.Navigation("DocumentMainShaphies");

                    b.Navigation("ImageMainShaphies");
                });

            modelBuilder.Entity("Domain.Entity.PaymentMethod", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Domain.Entity.Province", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("Domain.Entity.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entity.SecondaryDiamond", b =>
                {
                    b.Navigation("DocumentSecondaryDiamonds");

                    b.Navigation("ImageSecondaryDiamonds");
                });

            modelBuilder.Entity("Domain.Entity.SecondaryShaphie", b =>
                {
                    b.Navigation("DocumentSecondaryShaphies");

                    b.Navigation("ImageSecondaryShaphies");
                });

            modelBuilder.Entity("Domain.Entity.Staff", b =>
                {
                    b.Navigation("AppraiserValuations");

                    b.Navigation("Lots");

                    b.Navigation("ShipperInvoices");

                    b.Navigation("StaffInvoices");

                    b.Navigation("StaffValuations");
                });

            modelBuilder.Entity("Domain.Entity.Valuation", b =>
                {
                    b.Navigation("HistoryValuations");

                    b.Navigation("ImageValuations");

                    b.Navigation("Jewelry");

                    b.Navigation("ValuationDocuments");
                });

            modelBuilder.Entity("Domain.Entity.Wallet", b =>
                {
                    b.Navigation("RequestWithdraws");
                });

            modelBuilder.Entity("Domain.Entity.Ward", b =>
                {
                    b.Navigation("AddressToShips");
                });
#pragma warning restore 612, 618
        }
    }
}
